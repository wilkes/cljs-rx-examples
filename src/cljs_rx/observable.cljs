(ns cljs-rx.observable
  (:refer-clojure :exclude [concat count distinct empty first group-by last max merge min repeat take take-last take-while to-array])
  (:use-macros [cljs-rx.macros :only [defwrap]]))

(defwrap aggregate .aggregate [seed_or_accumulater] [seed])
(defwrap all .all [predicate])
(defwrap amb .amb [right])
(defwrap and .and [right])
(defwrap any .any [] [predicate])
(defwrap as-observable .asObservable)
(defwrap average .average [] [key-selector])
(defwrap buffer .buffer [buffer-opening-or-closing-selector] [closing-selector])
(defwrap buffer-with-count .bufferWithCount [count skip])
(defwrap buffer-with-time  .bufferWithTime [time-span] [time-shift-or-schduler scheduler])
(defwrap buffer-with-time-or-count  .bufferWithTimeOrCount  [] [time-span count scheduler])
(defwrap catch-expection  .catchException [handler-or-second])
(defwrap combine-latest  .combineLatest [] args-last-is-result-selector)
(defwrap concat  .concat [] observables)
(defwrap concat-observable  .concatObservable)
(defwrap contains .contains [value] [comparer])
(defwrap count .count [] [predicate])
(defwrap default-if-empty .defaultIfEmpty [] [default-value])
(defwrap delay .delay [due-time] [scheduler])
(defwrap delay-subscription .delaySubscription [due-time] [scheduler])
(defwrap dematerialize .dematerialize)
(defwrap distinct .distinct [] [key-selector key-serializer])
(defwrap distinct-until-changed .distinctUntilChanged [] [key-selector comparer])
(defwrap do-acton .doAction [observable-or-on-next] [on-error on-completed])
(defwrap do-while .doWhile)
(defwrap element-at .elementAt [index])
(defwrap element-at-or-default .elementAtOrDefault [index default-value])
(defwrap empty .empty)
(defwrap expand .expand)
(defwrap finally-action .finallyAction [action])
(defwrap first .first [] [predicate])
(defwrap first-or-default .firstOrDefault [predicat-or-default] [default-value])
(defwrap fork-join .forkJoin [second resultSelector])
(defwrap group-by .groupBy [key-selector] [element-selector key-serializer])
(defwrap group-by-until .groupByUntil [key-selector] [element-selector duration-selector key-serializer])
(defwrap group-join .groupJoin [right left-duration-select right-duration-select result-selector])
(defwrap ignore-elements .ignoreElements)
(defwrap is-empty .isEmpty)
(defwrap join .join [right left-duration-select right-duration-select result-selector])
(defwrap last .last [] [predicate])
(defwrap last-or-default .lastOrDefault [predicat-or-default] [default-value])
(defwrap max .max [] [comparer])
(defwrap max-by .maxBy [key-selector] [comparer])
(defwrap merge .merge [maxConcurrentOrOther])
(defwrap merge-observable .mergeObservable)
(defwrap min .min [] [comparer])
(defwrap min-by .minBy [key-selector] [comparer])
(defwrap multicast .multicast [subject-or-subject-selector selector])
(defwrap observe-on .observeOn [scheduler])
(defwrap on-error-resume-next .onErrorResumeNext [second])
(defwrap publish .publish [] [selector])
(defwrap publish-last .publishLast [] [selector])
(defwrap publish-value .publishValue [initial-value-or-selector] [selector])
(defwrap ref-count .refCount)
(defwrap repeat .repeat [repeat-count])
(defwrap replay .replay [selector buffer-size window scheduler])
(defwrap retry .retry [retry-count])
(defwrap sample .sample [interval-or-sampler] [scheduler])
(defwrap scan .scan [seed-or-accumulater] [accumulator])
(defwrap select .select [selector])
(defwrap select-many .selectMany [selector] [result-selector])
(defwrap single .single [] [predicate])
(defwrap single-or-default .singleOrDefault [predicate-or-default] [default-value])
(defwrap skip .skip [count])
(defwrap skip-last .skipLast [count])
(defwrap skip-until .skipUntil [other])
(defwrap skip-while .skipWhile [predicate])
(defwrap start-with .startWith [] scheduler-and-values)
(defwrap subscribe .subscribe [observable-or-on-next] [on-error on-completed])
(defwrap subscribe-on .subscribeOn [scheduler])
(defwrap sum .sum [] [key-selector])
(defwrap switch-latest .switchLatest)
(defwrap take .take [count] [scheduler])
(defwrap take-last .takeLast [count] [scheduler])
(defwrap take-last-buffer .takeLastBuffer [count])
(defwrap take-until .takeUntil [other])
(defwrap take-while .takeWhile [predicate])
(defwrap then .then [selector])
(defwrap throttle .throttle [due-time] [scheduler])
(defwrap throw-exception .throwException)
(defwrap time-interval .timeInterval [] [scheduler])
(defwrap timestamp .timestamp [] [scheduler])
(defwrap timeout .timeout [due-time] [other scheduler])
(defwrap to-array .toArray)
(defwrap using .using)
(defwrap where .where [predicate])
(defwrap window .window [window-opening-or-closing-select] [closing-selector])
(defwrap window-with-count .windowWithCount [count] [skip])
(defwrap window-with-time .windowWithTime [time-span] [time-shift-or-schduler scheduler])
(defwrap window-with-time-or-count .windowWithTimeOrCount [] [time-span count scheduler])
(defwrap zip .zip [] args-last-is-result-selector)